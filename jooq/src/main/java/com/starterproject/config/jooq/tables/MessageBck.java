/*
 * This file is generated by jOOQ.
 */
package com.starterproject.config.jooq.tables;


import com.starterproject.config.jooq.EdMex;
import com.starterproject.config.jooq.tables.records.MessageBckRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageBck extends TableImpl<MessageBckRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ed_mex.message_bck</code>
     */
    public static final MessageBck MESSAGE_BCK = new MessageBck();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageBckRecord> getRecordType() {
        return MessageBckRecord.class;
    }

    /**
     * The column <code>ed_mex.message_bck.idRoom</code>.
     */
    public final TableField<MessageBckRecord, Integer> IDROOM = createField(DSL.name("idRoom"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ed_mex.message_bck.sender</code>.
     */
    public final TableField<MessageBckRecord, String> SENDER = createField(DSL.name("sender"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>ed_mex.message_bck.message</code>.
     */
    public final TableField<MessageBckRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>ed_mex.message_bck.created_date</code>.
     */
    public final TableField<MessageBckRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private MessageBck(Name alias, Table<MessageBckRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageBck(Name alias, Table<MessageBckRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ed_mex.message_bck</code> table reference
     */
    public MessageBck(String alias) {
        this(DSL.name(alias), MESSAGE_BCK);
    }

    /**
     * Create an aliased <code>ed_mex.message_bck</code> table reference
     */
    public MessageBck(Name alias) {
        this(alias, MESSAGE_BCK);
    }

    /**
     * Create a <code>ed_mex.message_bck</code> table reference
     */
    public MessageBck() {
        this(DSL.name("message_bck"), null);
    }

    public <O extends Record> MessageBck(Table<O> child, ForeignKey<O, MessageBckRecord> key) {
        super(child, key, MESSAGE_BCK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EdMex.ED_MEX;
    }

    @Override
    public MessageBck as(String alias) {
        return new MessageBck(DSL.name(alias), this);
    }

    @Override
    public MessageBck as(Name alias) {
        return new MessageBck(alias, this);
    }

    @Override
    public MessageBck as(Table<?> alias) {
        return new MessageBck(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageBck rename(String name) {
        return new MessageBck(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageBck rename(Name name) {
        return new MessageBck(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageBck rename(Table<?> name) {
        return new MessageBck(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
